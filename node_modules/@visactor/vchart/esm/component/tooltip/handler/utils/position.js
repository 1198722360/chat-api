import { TooltipFixedPosition } from "../../../../typings/tooltip/position";

import { isFunction, isNumber, isValid } from "@visactor/vutils";

export const getActualTooltipPositionValue = (position, event) => {
    let result;
    if (isValid(position)) if (isNumber(position)) result = position; else if (isFunction(position)) {
        const tooltipPosition = position(event);
        isNumber(tooltipPosition) && (result = tooltipPosition);
    }
    return result;
};

export const positionType = {
    [TooltipFixedPosition.left]: [ "left", "middle" ],
    [TooltipFixedPosition.right]: [ "right", "middle" ],
    [TooltipFixedPosition.inside]: [ "middle", "middle" ],
    [TooltipFixedPosition.top]: [ "middle", "top" ],
    [TooltipFixedPosition.lt]: [ "left", "top" ],
    [TooltipFixedPosition.tl]: [ "left", "top" ],
    [TooltipFixedPosition.rt]: [ "right", "top" ],
    [TooltipFixedPosition.tr]: [ "right", "top" ],
    [TooltipFixedPosition.bottom]: [ "middle", "bottom" ],
    [TooltipFixedPosition.bl]: [ "left", "bottom" ],
    [TooltipFixedPosition.lb]: [ "left", "bottom" ],
    [TooltipFixedPosition.br]: [ "right", "bottom" ],
    [TooltipFixedPosition.rb]: [ "right", "bottom" ]
};

export const getHorizontalPositionType = (position, defaultCase) => {
    var _a, _b;
    return null !== (_b = null === (_a = positionType[position]) || void 0 === _a ? void 0 : _a[0]) && void 0 !== _b ? _b : defaultCase;
};

export const getVerticalPositionType = (position, defaultCase) => {
    var _a, _b;
    return null !== (_b = null === (_a = positionType[position]) || void 0 === _a ? void 0 : _a[1]) && void 0 !== _b ? _b : defaultCase;
};
//# sourceMappingURL=position.js.map
